name: CI/CD Pipeline for Simple RAG Project

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # --- –û–Ω–æ–≤–ª–µ–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (CI) ---
  test:
    runs-on: ubuntu-latest

    steps:
      - name: 1. Checkout code
        uses: actions/checkout@v4

      - name: 2. Set up Python and Poetry
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
#          cache: 'poetry'

      - name: 2.1 Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version

      - name: 3. Install Python dependencies
        run: poetry install

      - name: 4 Docker clean-up (before build)
        run: docker system prune -af || true

      - name: 5. Start services using Docker Compose
        # –ü–µ—Ä–µ–¥–∞—î–º–æ —Å–µ–∫—Ä–µ—Ç –≤ docker-compose, –¥–µ –≤—ñ–Ω –±—É–¥–µ –ø—ñ–¥—Ö–æ–ø–ª–µ–Ω–∏–π –∑–º—ñ–Ω–Ω–æ—é ${OPENAI_API_KEY}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: docker compose -f docker-compose.ci.yml up -d --build

      - name: 6. Wait for application to be healthy
        # –¶–µ–π –∫—Ä–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏–π. –í—ñ–Ω —á–µ–∫–∞—î, –ø–æ–∫–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.
        # –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç–∏ –¥–æ /health –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥, –º–∞–∫—Å–∏–º—É–º 12 —Å–ø—Ä–æ–± (1 —Ö–≤–∏–ª–∏–Ω–∞).
        run: |
          for i in {1..12}; do
            if curl -f http://localhost:8080/health; then
              echo "‚úÖ Application is healthy!"
              exit 0
            fi
            echo "‚è≥ Waiting for application to start..."
            sleep 5
          done
          echo "‚ùå Application did not start in time."
          exit 1

      - name: 7. Run tests
        env:
          # –¢–µ–ø–µ—Ä pytest –º–æ–∂–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å —ñ –¥–æ API (localhost:8080) —ñ –¥–æ Qdrant (localhost:6333)
          QDRANT_HOST: localhost
          QDRANT_PORT: 6333
          APP_BASE_URL: http://localhost:8080 # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –¥–ª—è –≥–Ω—É—á–∫–æ—Å—Ç—ñ —Ç–µ—Å—Ç—ñ–≤
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: poetry run pytest

      - name: 8. Cleanup services
        # –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ü–µ–π –∫—Ä–æ–∫, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ç–µ—Å—Ç–∏ –≤–ø–∞–ª–∏, —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
        if: always()
        run: docker compose -f docker-compose.ci.yml down

  # --- –ó–∞–≤–¥–∞–Ω–Ω—è build-and-push —Ç–∞ deploy –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω ---
  build-and-push:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 1. Checkout code
        uses: actions/checkout@v4
      - name: 2. Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 3. Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
      - name: 4. Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: 1. Example Deployment Step
        run: echo "üöÄ Deploying image ghcr.io/${{ github.repository }}:latest"