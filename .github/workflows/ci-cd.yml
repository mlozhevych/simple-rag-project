name: CI/CD Pipeline for Simple RAG Project

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: 1. Checkout code
        uses: actions/checkout@v4

      - name: 2. Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
#          cache: 'poetry' # Цей крок лише налаштовує кешування

      - name: 3. Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest # або конкретна версія, напр. 1.8.2

      - name: 4. Install Python dependencies
        run: poetry install # Встановлює всі залежності (включно з dev) для запуску тестів на хості

      - name: 5. Cache Hugging Face models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-huggingface-models-v1

      - name: 6. Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 7. Start services using Docker Compose
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: docker compose -f docker-compose.ci.yml up -d --build

      - name: 8. Wait for app and run tests
        env:
          QDRANT_HOST: localhost
          QDRANT_PORT: 6333
          APP_BASE_URL: http://localhost:8080
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          for i in {1..12}; do
            if curl -sf http://localhost:8080/health; then
              echo "✅ Application is healthy!"
              poetry run pytest
              exit $?
            fi
            echo "⏳ Waiting for application to start..."
            sleep 5
          done
          echo "❌ Application did not start in time."
          exit 1

      - name: 9. Cleanup services
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v --rmi local